{"ast":null,"code":"var _jsxFileName = \"/Users/hseo/mr-camel/src/pages/RecentList/index.js\";\nimport React from \"react\";\nimport \"./style.css\";\nimport BrandFilter from \"components/BrandFilter\";\nimport InterestFilter from \"components/InterestFilter\";\nimport RecentListView from \"components/RecentListView\";\nimport SortMethodBar from \"components/SortMethodBar\";\nimport Header from \"components/Header\";\nimport BRAND_LIST from \"utils/constants/BRAND_LIST\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass RecentListPage extends React.Component {\n  constructor(props) {\n    super(props);\n    const parsedInquiryHistory = JSON.parse(window.localStorage.getItem(\"inquiryHistory\"));\n    this.state = {\n      checkedBrand: BRAND_LIST.reduce((map, brand) => {\n        map.set(brand, false);\n        return map;\n      }, new Map()),\n      isHidden: false,\n      sortMethod: \"recent\",\n      inquiryHistoryList: parsedInquiryHistory.recent.map(e => parsedInquiryHistory.items[e]),\n      apathyList: JSON.parse(window.localStorage.getItem(\"apathy\"))\n    };\n    this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\n    this.handleInterestCheckboxChange = this.handleInterestCheckboxChange.bind(this);\n    this.handleMethodChange = this.handleMethodChange.bind(this);\n  }\n\n  handleCheckboxChange(event) {\n    const brand = event.target.name;\n    const isChecked = event.target.checked;\n    this.setState(prev => ({\n      checkedBrand: prev.checkedBrand.set(brand, isChecked)\n    }));\n  }\n\n  handleInterestCheckboxChange(event) {\n    this.setState({\n      isHidden: event.target.checked\n    });\n  }\n\n  handleMethodChange(e) {\n    this.setState(prevState => ({ ...prevState,\n      sortMethod: e.target.value\n    }));\n  }\n\n  render() {\n    const filteredBrandList = Array.from(this.state.checkedBrand.values()).some(e => e === true) ? this.state.inquiryHistoryList.filter(product => [...this.state.checkedBrand].flatMap(e => e[1] === true ? [e[0]] : []).includes(product.brand)) : this.state.inquiryHistoryList;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"recentList-filters\",\n        children: [/*#__PURE__*/_jsxDEV(BrandFilter, {\n          checkedBrand: this.state.checkedBrand,\n          handleCheckboxChange: this.handleCheckboxChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SortMethodBar, {\n          handleMethodChange: this.handleMethodChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InterestFilter, {\n          handleInterestCheckboxChange: this.handleInterestCheckboxChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RecentListView, {\n          sortMethod: this.state.sortMethod,\n          brandList: this.state.isHidden ? filteredBrandList.filter(e => this.state.apathyList.indexOf(e.id) === -1) : filteredBrandList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default RecentListPage;","map":{"version":3,"sources":["/Users/hseo/mr-camel/src/pages/RecentList/index.js"],"names":["React","BrandFilter","InterestFilter","RecentListView","SortMethodBar","Header","BRAND_LIST","RecentListPage","Component","constructor","props","parsedInquiryHistory","JSON","parse","window","localStorage","getItem","state","checkedBrand","reduce","map","brand","set","Map","isHidden","sortMethod","inquiryHistoryList","recent","e","items","apathyList","handleCheckboxChange","bind","handleInterestCheckboxChange","handleMethodChange","event","target","name","isChecked","checked","setState","prev","prevState","value","render","filteredBrandList","Array","from","values","some","filter","product","flatMap","includes","indexOf","id"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nimport BrandFilter from \"components/BrandFilter\";\nimport InterestFilter from \"components/InterestFilter\";\nimport RecentListView from \"components/RecentListView\";\nimport SortMethodBar from \"components/SortMethodBar\";\nimport Header from \"components/Header\";\nimport BRAND_LIST from \"utils/constants/BRAND_LIST\";\n\nclass RecentListPage extends React.Component {\n  constructor(props) {\n    super(props);\n    const parsedInquiryHistory= JSON.parse(window.localStorage.getItem(\"inquiryHistory\"));\n    this.state = {\n      checkedBrand: BRAND_LIST.reduce((map, brand) => {\n        map.set(brand, false);\n        return map;\n      }, new Map()),\n      isHidden: false,\n      sortMethod: \"recent\",\n      inquiryHistoryList: parsedInquiryHistory.recent.map((e) => parsedInquiryHistory.items[e]),\n      apathyList: JSON.parse(window.localStorage.getItem(\"apathy\")),\n    };\n    this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\n    this.handleInterestCheckboxChange = this.handleInterestCheckboxChange.bind(this);\n    this.handleMethodChange = this.handleMethodChange.bind(this);\n  }\n\n  handleCheckboxChange(event) {\n    const brand = event.target.name;\n    const isChecked = event.target.checked;\n    this.setState(prev => ({ checkedBrand: prev.checkedBrand.set(brand, isChecked) }));\n  }\n\n  handleInterestCheckboxChange(event) {\n    this.setState({ isHidden: event.target.checked });\n  }\n\n  handleMethodChange(e) {\n      this.setState(prevState => ({ ...prevState, sortMethod: e.target.value }))\n  }\n\n  render() {\n    const filteredBrandList = Array.from(this.state.checkedBrand.values()).some(e => e === true) ? \n        this.state.inquiryHistoryList\n        .filter(product => [...this.state.checkedBrand].flatMap(e => (e[1] === true ? [e[0]] : []))\n        .includes(product.brand))\n        :\n        this.state.inquiryHistoryList\n\n    return (\n      <>\n        <Header />\n        <div className=\"recentList-filters\">\n          <BrandFilter checkedBrand={this.state.checkedBrand} handleCheckboxChange={this.handleCheckboxChange} />\n          <SortMethodBar handleMethodChange={this.handleMethodChange}/>\n          <InterestFilter handleInterestCheckboxChange={this.handleInterestCheckboxChange} />\n          <RecentListView sortMethod={this.state.sortMethod} brandList={this.state.isHidden ? filteredBrandList.filter(e => this.state.apathyList.indexOf(e.id) === -1) : filteredBrandList} />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default RecentListPage;\n"]},"metadata":{},"sourceType":"module"}