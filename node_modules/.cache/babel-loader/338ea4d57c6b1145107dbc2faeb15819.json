{"ast":null,"code":"var _jsxFileName = \"/Users/hseo/mr-camel/src/pages/Product/index.js\";\nimport { Component } from \"react\";\nimport { withRouter } from \"react-router\";\nimport Header from \"../../components/Header\";\nimport PRODUCT_LIST from \"utils/constants/PRODUCT_LIST\";\nimport checkForApathy from \"utils/checkProduct/checkForApathy\";\nimport addApathy from \"utils/manageLocalStorage/addApathy\";\nimport addInquiryHistory from \"utils/manageLocalStorage/addInquiryHistory\";\nimport RandomButton from \"components/RandomButton\";\nimport Card from \"components/Card\";\nimport \"./style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst emptyInfo = {\n  title: \"상품이 존재하지 않습니다\"\n};\n\nclass Product extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getRandomProduct = currentProductId => {\n      while (true) {\n        let newProductId = Math.floor(Math.random() * (PRODUCT_LIST.length + 1));\n        if (newProductId === 0 || newProductId === currentProductId || checkForApathy(newProductId)) continue;\n        return PRODUCT_LIST.find(e => e.id === newProductId);\n      }\n    };\n\n    this.handleOnClickRandomButton = isApathyButton => {\n      const currentProductId = this.state.currentProductInfo.id;\n\n      if (isApathyButton) {\n        addApathy(currentProductId);\n      }\n\n      const newProductInfo = this.getRandomProduct(currentProductId);\n      window.sessionStorage.setItem(\"currentProductInfo\", JSON.stringify(newProductInfo));\n      addInquiryHistory(newProductInfo);\n      this.setState(prevState => ({\n        currentProductInfo: newProductInfo\n      }));\n    };\n\n    const currentProductInfo = JSON.parse(window.sessionStorage.getItem(\"currentProductInfo\"));\n    this.state = {\n      currentProductInfo: currentProductInfo ? currentProductInfo : emptyInfo\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"product-page\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"product-page-content\",\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          productInfo: this.state.currentProductInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button-wrap\",\n          children: [/*#__PURE__*/_jsxDEV(RandomButton, {\n            isApathyButton: false,\n            handleOnClick: this.handleOnClickRandomButton\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(RandomButton, {\n            isApathyButton: true,\n            handleOnClick: this.handleOnClickRandomButton\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(Product);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/Users/hseo/mr-camel/src/pages/Product/index.js"],"names":["Component","withRouter","Header","PRODUCT_LIST","checkForApathy","addApathy","addInquiryHistory","RandomButton","Card","emptyInfo","title","Product","constructor","props","getRandomProduct","currentProductId","newProductId","Math","floor","random","length","find","e","id","handleOnClickRandomButton","isApathyButton","state","currentProductInfo","newProductInfo","window","sessionStorage","setItem","JSON","stringify","setState","prevState","parse","getItem","render"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,OAAOC,cAAP,MAA2B,mCAA3B;AACA,OAAOC,SAAP,MAAsB,oCAAtB;AACA,OAAOC,iBAAP,MAA8B,4CAA9B;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAO,aAAP;;AAGA,MAAMC,SAAS,GAAG;AAACC,EAAAA,KAAK,EAAE;AAAR,CAAlB;;AAEA,MAAMC,OAAN,SAAsBX,SAAtB,CAAgC;AAC9BY,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAQjBC,gBARiB,GAQGC,gBAAD,IAAsB;AACrC,aAAO,IAAP,EAAa;AACT,YAAIC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBhB,YAAY,CAACiB,MAAb,GAAsB,CAAvC,CAAX,CAAnB;AACA,YAAIJ,YAAY,KAAK,CAAjB,IAAsBA,YAAY,KAAKD,gBAAvC,IAA2DX,cAAc,CAACY,YAAD,CAA7E,EACI;AACJ,eAAOb,YAAY,CAACkB,IAAb,CAAmBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASP,YAAlC,CAAP;AACH;AACJ,KAfgB;;AAAA,SAiBjBQ,yBAjBiB,GAiBYC,cAAD,IAAoB;AAC5C,YAAMV,gBAAgB,GAAG,KAAKW,KAAL,CAAWC,kBAAX,CAA8BJ,EAAvD;;AACA,UAAIE,cAAJ,EAAoB;AAChBpB,QAAAA,SAAS,CAACU,gBAAD,CAAT;AACH;;AACD,YAAMa,cAAc,GAAG,KAAKd,gBAAL,CAAsBC,gBAAtB,CAAvB;AACAc,MAAAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,CAA8B,oBAA9B,EAAoDC,IAAI,CAACC,SAAL,CAAeL,cAAf,CAApD;AACAtB,MAAAA,iBAAiB,CAACsB,cAAD,CAAjB;AACA,WAAKM,QAAL,CAAcC,SAAS,KAAK;AAACR,QAAAA,kBAAkB,EAAEC;AAArB,OAAL,CAAvB;AACH,KA1BgB;;AAEf,UAAMD,kBAAkB,GAAGK,IAAI,CAACI,KAAL,CAAWP,MAAM,CAACC,cAAP,CAAsBO,OAAtB,CAA8B,oBAA9B,CAAX,CAA3B;AACA,SAAKX,KAAL,GAAa;AACTC,MAAAA,kBAAkB,EAAEA,kBAAkB,GAAGA,kBAAH,GAAwBlB;AADrD,KAAb;AAGH;;AAsBD6B,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACI,QAAC,IAAD;AAAM,UAAA,WAAW,EAAE,KAAKZ,KAAL,CAAWC;AAA9B;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,kCACI,QAAC,YAAD;AAAc,YAAA,cAAc,EAAE,KAA9B;AAAqC,YAAA,aAAa,EAAE,KAAKH;AAAzD;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,YAAD;AAAc,YAAA,cAAc,EAAE,IAA9B;AAAoC,YAAA,aAAa,EAAE,KAAKA;AAAxD;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;;AA1C6B;;AA6ChC,oBAAevB,UAAU,CAACU,OAAD,CAAzB","sourcesContent":["import { Component } from \"react\";\nimport { withRouter } from \"react-router\";\nimport Header from \"../../components/Header\";\nimport PRODUCT_LIST from \"utils/constants/PRODUCT_LIST\";\nimport checkForApathy from \"utils/checkProduct/checkForApathy\";\nimport addApathy from \"utils/manageLocalStorage/addApathy\";\nimport addInquiryHistory from \"utils/manageLocalStorage/addInquiryHistory\";\nimport RandomButton from \"components/RandomButton\";\nimport Card from \"components/Card\";\nimport \"./style.css\";\n\n\nconst emptyInfo = {title: \"상품이 존재하지 않습니다\"}\n\nclass Product extends Component {\n  constructor(props) {\n      super(props);\n      const currentProductInfo = JSON.parse(window.sessionStorage.getItem(\"currentProductInfo\"));\n      this.state = {\n          currentProductInfo: currentProductInfo ? currentProductInfo : emptyInfo,\n      };\n  }\n  \n    getRandomProduct = (currentProductId) => {\n        while (true) {\n            let newProductId = Math.floor(Math.random() * (PRODUCT_LIST.length + 1))\n            if (newProductId === 0 || newProductId === currentProductId || checkForApathy(newProductId))\n                continue;\n            return PRODUCT_LIST.find((e) => e.id === newProductId);\n        }\n    }\n\n    handleOnClickRandomButton = (isApathyButton) => {\n        const currentProductId = this.state.currentProductInfo.id;\n        if (isApathyButton) {\n            addApathy(currentProductId);\n        }\n        const newProductInfo = this.getRandomProduct(currentProductId);\n        window.sessionStorage.setItem(\"currentProductInfo\", JSON.stringify(newProductInfo));\n        addInquiryHistory(newProductInfo);\n        this.setState(prevState => ({currentProductInfo: newProductInfo}));\n    }\n\n  render() {\n    return (\n      <div className=\"product-page\">\n        <Header />\n        <div className=\"product-page-content\">\n            <Card productInfo={this.state.currentProductInfo}/>\n            <div className=\"button-wrap\">\n                <RandomButton isApathyButton={false} handleOnClick={this.handleOnClickRandomButton}/>\n                <RandomButton isApathyButton={true} handleOnClick={this.handleOnClickRandomButton}/>\n            </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Product);\n"]},"metadata":{},"sourceType":"module"}